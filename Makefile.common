CXXFLAGS+=-std=c++26 -Wall -Wextra -Wno-psabi -O2 -g0 -Wno-attributes
CXXFLAGS_clang := -Wno-unknown-pragmas --gcc-toolchain=/home/mkretz/.local/gcc-master
CXXFLAGS_gcc := -fconcepts-diagnostics-depth=3

ifneq ($(shell $(CXX) --version|grep -i clang),)
compiler:=clang
else ifneq ($(shell $(CXX) --version|grep 'g++'),)
compiler:=gcc
else
compiler:=unknown
endif

CXXFLAGS += $(CXXFLAGS_$(compiler))

#-D_GLIBCXX_DEBUG_UB=1

icerun := $(shell which icerun)

ifeq ($(icerun)$(shell which icecc),)
# without icecream (icerun and icecc) set DIRECT=1
DIRECT := 1
else ifeq ($(ICECC),no)
DIRECT := 1
else ifeq ($(ICECC),disable)
DIRECT := 1
else ifneq ($(notdir $(realpath $(CXX))),icecc)
# CXX isn't using icecream
DIRECT := 1
icerun :=
else ifneq ($(DIRECT),)
ifneq ($(ICECC_CXX),)
ifeq ($(notdir $(realpath $(CXX))),icecc)
# with icecream, DIRECT, and ICECC_CXX set, and CXX resolving to icecc, compile
# locally but allocate slots on the icecream scheduler
export ICECC=no
endif
endif
endif

testarchs ::= athlon64 \
	     nocona \
	     core2 \
	     westmere \
	     ivybridge \
	     bdver4 \
	     skylake \
	     znver4 \
	     skylake-avx512

tests ::= $(patsubst tests/%.cpp,%,$(wildcard tests/*.cpp))

testtypes ::= signed-char \
	     unsigned-char \
	     signed-short \
	     unsigned-short \
	     signed-int \
	     unsigned-int \
	     signed-long \
	     unsigned-long \
	     signed-long-long \
	     unsigned-long-long \
	     float \
	     double \
	     char \
	     char8_t \
	     wchar_t \
	     char16_t \
	     char32_t \
	     std::byte

ifneq ($(compiler),clang)
testtypes += std::float16_t \
	     std::float32_t \
	     std::float64_t
endif

testtypes ::= $(subst ::,--,$(testtypes))

testwidths ::= $(shell seq 1 67)

getwidth = $(subst .,,$(suffix $(1)))
gettype = $(subst -, ,$(subst --,::,$(subst .,,$(basename $(notdir $(1))))))
getarch = $(subst .,,$(suffix $(subst /,,$(dir $(1)))))
gettest = $(basename $(subst /,,$(dir $(1))))

define pch_template
obj/$(1).hpp: tests/unittest*.h tests/*.cpp
	@echo "Generate $$@"
	@grep -h '^ *# *include ' $$^|grep -v unittest.h|sort -u|sed 's,","../tests/,' > $$@

obj/$(1).depend: obj/$(1).hpp
	@echo "Update $(1) dependencies"
	@$$(CXX) $$(CXXFLAGS) -march=$(1) -MM -MT "obj/$(1).hpp.gch" $$< > $$@

include obj/$(1).depend

obj/$(1).hpp.gch: obj/$(1).hpp
	@echo "Build pre-compiled header for $(1)"
	@$$(CXX) $$(CXXFLAGS) -march=$(1) -c $$< -o $$@

endef

$(foreach arch,$(testarchs),\
	$(eval $(call pch_template,$(arch))))

# arguments: test, arch
define exe_template
obj/$(1).$(2)/%.exe: tests/$(1).cpp obj/$(2).hpp.gch tests/unittest*.h
	@echo "Build $(if $(DIRECT),and link )$$(@:obj/%.exe=check/%)"
	@mkdir -p $$(dir $$@)
	@$$(CXX) $$(CXXFLAGS) -march=$(2) -D UNITTEST_TYPE="$$(call gettype,$$*)" -D UNITTEST_WIDTH=$$(call getwidth,$$*) -include obj/$(2).hpp $(if $(DIRECT),-o $$@,-c -o $$(@:.exe=.o)) $$<
ifeq ($(DIRECT),)
	@echo " Link $$(@:obj/%.exe=check/%)"
	@$$(CXX) $$(CXXFLAGS) -march=$(2) -o $$@ $$(@:.exe=.o)
	@rm $$(@:.exe=.o)
endif

endef

$(foreach arch,$(testarchs),\
	$(foreach t,$(tests),\
	$(eval $(call exe_template,$(t),$(arch)))))

constexpr_checks ::= $(foreach arch,$(testarchs),obj/constexpr.$(arch).s)

.PHONY: check-constexpr
check-constexpr: $(shell shuf -e -- $(constexpr_checks))

check_targets := obj/check.targets

codegen_files ::= $(wildcard codegen/*.c++)
codegen_names ::= $(patsubst codegen/%.c++,%,$(codegen_files))
codegen_targets ::= $(patsubst %,check-codegen-%,$(codegen_names))

obj:
	@mkdir -p obj

obj/codegen.depend: obj $(codegen_files)
	@echo "Update codegen dependencies"
	$(file >$@)
	$(foreach c,$(codegen_names),\
	  $(shell $(CXX) $(CXXFLAGS) -MM -MT obj/codegen.$c.s codegen/$c.c++ >> $@))

include obj/codegen.depend

$(shell $(CXX) $(CXXFLAGS) -MM -MT "obj/constexpr.%.s" constexpr_tests.c++|tr -d '\\') obj/%.hpp.gch
	@echo "Build constexpr tests for $*"
	@$(CXX) $(CXXFLAGS) -march=$* -include obj/$*.hpp -S -o $@ constexpr_tests.c++

check/%: obj/%.exe always-remake
	@mkdir -p $(dir $@)
	@{ \
		echo "================================================================";\
		echo "  Run check/$*"; \
		echo "================================================================";\
		$(icerun) obj/$*.exe; \
	} | tee $@
	@tail -n1 $@ | grep -qv '^Failed tests: [^0]'

.PHONY: always-remake
always-remake: ;

check-codegen-%: obj/codegen.%.s codegen/check.sh
	@echo "Testing for expected instructions in $<"
	@codegen/check.sh "codegen/$*.c++" "$<"

obj/codegen.%.s: codegen/%.c++
	@echo "Building $@"
	@$(CXX) $(CXXFLAGS) -masm=intel -march=skylake -S -o $@ $<
	@cat $@ | grep -v '^\s*\.' | c++filt > $@.tmp
	@mv $@.tmp $@

