# SPDX-License-Identifier: GPL-3.0-or-later
# Copyright ¬© 2025      GSI Helmholtzzentrum fuer Schwerionenforschung GmbH
#                       Matthias Kretz <m.kretz@gsi.de>

CXXFLAGS+=-std=c++26 -Wall -Wextra -Werror -O2 -g0 -Wno-attributes -D_GLIBCXX_ASSERTIONS=1 $(FLAGS)
CXXFLAGS_clang := -Wno-unknown-pragmas -ferror-limit=3
CXXFLAGS_gcc := -fconcepts-diagnostics-depth=3 -fconstexpr-ops-limit=67108864 -fmax-errors=3

cxx_version := $(shell $(CXX) --version | head -n1)

ifneq ($(findstring clang,$(cxx_version)),)
compiler:=clang
else ifneq ($(findstring g++,$(cxx_version))$(findstring GCC,$(cxx_version)),)
compiler:=gcc
else
compiler:=unknown
endif

ifeq ($(file < .cxx_version),)
$(file > .cxx_version,$(cxx_version))
else
ifneq ($(file < .cxx_version),$(cxx_version))
$(info Remove PCH because the compiler changed. $(shell rm -f obj/*.hpp.gch))
$(file > .cxx_version,$(cxx_version))
endif
endif

print_compiler_info:
	@echo "Compiler: $(CXX) $(ICECC_CXX)"
	@echo "          $(cxx_version)"
	@echo "-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-"

CXXFLAGS += $(CXXFLAGS_$(compiler))

#-D_GLIBCXX_DEBUG_UB=1

icerun := $(shell which icerun)

ifeq ($(ICECC_CXX),)
LINK_CXX := $(CXX)
else
LINK_CXX := $(ICECC_CXX)
endif

ifeq ($(icerun)$(shell which icecc),)
# without icecream (icerun and icecc) set DIRECT=1
DIRECT := 1
else ifeq ($(ICECC),no)
DIRECT := 1
else ifeq ($(ICECC),disable)
DIRECT := 1
else ifneq ($(notdir $(realpath $(CXX))),icecc)
# CXX isn't using icecream
DIRECT := 1
icerun :=
else ifneq ($(DIRECT),)
ifneq ($(ICECC_CXX),)
ifeq ($(notdir $(realpath $(CXX))),icecc)
# with icecream, DIRECT, and ICECC_CXX set, and CXX resolving to icecc, compile
# locally but allocate slots on the icecream scheduler
export ICECC=no
endif
endif
endif

testarchs ::= athlon64 \
	     nocona \
	     core2 \
	     westmere \
	     ivybridge \
	     bdver4 \
	     skylake \
	     znver4 \
	     skylake-avx512

tests ::= $(patsubst tests/%.cpp,%,$(wildcard tests/*.cpp))

testtypes ::= signed-char \
	     unsigned-char \
	     signed-short \
	     unsigned-short \
	     signed-int \
	     unsigned-int \
	     signed-long-long \
	     unsigned-long-long \
	     float \
	     double

ifneq ($(compiler),clang)
testtypes += std::float16_t
endif

testtypes ::= $(subst ::,--,$(testtypes))

testwidths ::= $(shell seq 1 67)

getwidth = $(subst .,,$(suffix $(1)))
gettype = $(subst -, ,$(subst --,::,$(subst .,,$(basename $(notdir $(1))))))
getarch = $(subst .,,$(suffix $(subst /,,$(dir $(1)))))
gettest = $(basename $(subst /,,$(dir $(1))))

ifneq ($(MAKE_TERMOUT),)
CXXFLAGS += -fdiagnostics-color=always
msg_build := \e[34;1mBuild\e[0m
msg_link  := \e[33;1mLink \e[0m
msg_run   := \e[32;1mRun‚úîÔ∏è \e[0m
msg_runf  := \e[31;1mRun‚ùå\e[0m
else
msg_build := Build:
msg_link  := Link :
msg_run   := Run :)
msg_runf  := Run :(
endif

diag_transform := sed -e 's/\(, \)\?std::__detail::__build_flags{[^,]*,[^}]*}//g' -e 's/\<std::datapar::/dp::/g' -e 's/\<std::__detail::/üôà/g'

define call_compiler
{ { $(CXX) $(1) 2>&1; echo $$?>&2; } | $(diag_transform); } 3>&2 2>&1 1>&3 | { read s; [ $$s -gt 0 ] && echo Build command was: $(CXX) $(1); exit $$s; }
endef

print_progress := true

obj/%.fast-math.hpp: obj/%.hpp
	@cp $< $@

define pch_template
obj/$(1).hpp: tests/unittest*.h tests/*.cpp | obj
	@echo "Generate $$@"
	@grep -h '^ *# *include ' tests/unittest*.h tests/*.cpp|grep -v unittest.h|sed 's,","$(PWD)/tests/,' > $$@

obj/$(1).depend: obj/$(1).hpp
	@echo "Update $(1) dependencies"
	@$$(CXX) $$(CXXFLAGS) -march=$(1) -MM -MT "obj/$(1).hpp" obj/$(1).hpp | sed 's,: obj/$(1).hpp,:,' > $$@

include obj/$(1).depend

obj/$(1).hpp.gch: obj/$(1).hpp | print_compiler_info
	@printf -- '$$(msg_build) pre-compiled header for $(1)\n'
	@$$(call call_compiler, $$(CXXFLAGS) -march=$(1) -c $$< -o $$@)

obj/$(1).fast-math.hpp.gch: obj/$(1).fast-math.hpp | print_compiler_info
	@printf -- '$$(msg_build) pre-compiled fast-math header for $(1)\n'
	@$$(call call_compiler, $$(CXXFLAGS) -ffast-math -march=$(1) -c $$< -o $$@)

endef

$(foreach arch,$(testarchs),\
	$(eval $(call pch_template,$(arch))))

no_fast_math = $(shell head -n10 tests/$(1).cpp | grep -q no-fast-math && echo 1 || echo 0)

# arguments: test, arch
define exe_template
check/$(1).$(2)/%: tests/$(1).cpp obj/$(2).hpp.gch tests/unittest*.h
	@printf -- '$$(msg_build) $(if $(DIRECT),and link )$$(@:check/%=  obj/%.exe)\n'
	@mkdir -p $$(dir $$(@:check/%=obj/%.exe)) $$(dir $$@)
	@rm -f $$(@:check/%=obj/%.exe) $$@
	@$$(call call_compiler,$$(CXXFLAGS) -march=$(2) -D UNITTEST_TYPE="$$(call gettype,$$*)" -D UNITTEST_WIDTH=$$(call getwidth,$$*) -include obj/$(2).hpp $(if $(DIRECT),-o $$(@:check/%=obj/%.exe),-c -o $$(@:check/%=obj/%.o)) $$<)
ifeq ($(DIRECT),)
	@true || printf -- '$$(msg_link) $$@\n'
	@$$(LINK_CXX) $$(CXXFLAGS) -march=$(2) -o $$(@:check/%=obj/%.exe) $$(@:check/%=obj/%.o)
	@touch -r $$(@:check/%=obj/%.o) $$(@:check/%=obj/%.exe)
	@rm $$(@:check/%=obj/%.o)
endif
	@rm -f $$@.failed
	@$$(@:check/%=obj/%.exe) >$$@ 2>&1 && { \
		printf -- '$$(msg_run) %-60s %s\n' '$$@' "$$$$($$(print_progress))"; \
		touch -r $$(@:check/%=obj/%.exe) $$@; \
	} || { \
		printf -- '$$(msg_runf) $$@\n'; \
		cat $$@; \
		mv $$@ $$@.failed; \
		false; \
	}

check/fast-math/$(1).$(2)/%: tests/$(1).cpp obj/$(2).fast-math.hpp.gch tests/unittest*.h
ifeq ($(call no_fast_math,$(1)),1)
	@mkdir -p $$(dir $$@)
	@touch $$@
else
	@mkdir -p $$(dir $$(@:check/%=obj/%.exe)) $$(dir $$@)
	@printf -- '$$(msg_build) $(if $(DIRECT),and link )$$(@:check/%=  obj/%.exe)\n'
	@rm -f $$(@:check/%=obj/%.exe) $$@
	@$$(call call_compiler,$$(CXXFLAGS) -ffast-math -march=$(2) -D UNITTEST_TYPE="$$(call gettype,$$*)" -D UNITTEST_WIDTH=$$(call getwidth,$$*) -include obj/$(2).fast-math.hpp $(if $(DIRECT),-o $$(@:check/%=obj/%.exe),-c -o $$(@:check/%=obj/%.o)) $$<)
ifeq ($(DIRECT),)
	@true || printf -- '$$(msg_link) $$@\n'
	@$$(LINK_CXX) $$(CXXFLAGS) -ffast-math -march=$(2) -o $$(@:check/%=obj/%.exe) $$(@:check/%=obj/%.o)
	@touch -r $$(@:check/%=obj/%.o) $$(@:check/%=obj/%.exe)
	@rm $$(@:check/%=obj/%.o)
endif
	@rm -f $$@.failed
	@$$(@:check/%=obj/%.exe) >$$@ 2>&1 && { \
		printf -- '$$(msg_run) %-60s %s\n' '$$@' "$$$$($$(print_progress))"; \
		touch -r $$(@:check/%=obj/%.exe) $$@; \
	} || { \
		printf -- '$$(msg_runf) $$@\n'; \
		cat $$@; \
		mv $$@ $$@.failed; \
		false; \
	}
endif

endef

$(foreach arch,$(testarchs),\
	$(foreach t,$(tests),\
	$(eval $(call exe_template,$(t),$(arch)))))

constexpr_checks ::= $(foreach arch,$(testarchs),obj/constexpr.$(arch).s)

.PHONY: check-constexpr
check-constexpr: $(shell shuf -e -- $(constexpr_checks))

check_targets := obj/check.targets

codegen_files ::= $(wildcard codegen/*.c++)
codegen_names ::= $(patsubst codegen/%.c++,%,$(codegen_files))
codegen_targets ::= $(patsubst %,check-codegen-%,$(codegen_names))

ifeq ($(SIMD_PROTOTYPING_OBJ),)
make_obj_dir_rule := mkdir -p obj
else
make_obj_dir_rule := mkdir -p $(SIMD_PROTOTYPING_OBJ); ln -s $(SIMD_PROTOTYPING_OBJ) obj
endif

obj:
	@echo "Set up build dir and check dir"
	@$(make_obj_dir_rule)
	@mkdir -p obj/check
	@ln -s obj/check check

obj/codegen.depend: obj $(codegen_files)
	@echo "Update codegen dependencies"
	$(file >$@)
	$(foreach c,$(codegen_names),\
	  $(shell $(CXX) $(CXXFLAGS) -MM -MT obj/codegen.$c.s codegen/$c.c++ >> $@))

include obj/codegen.depend

$(shell $(CXX) $(CXXFLAGS) -MM -MT "obj/constexpr.%.s" constexpr_tests.c++|tr -d '\\') obj/%.hpp.gch
	@printf -- '$(msg_build) constexpr tests for $*\n'
	@$(CXX) $(CXXFLAGS) -march=$* -include obj/$*.hpp -S -o $@ constexpr_tests.c++

.PHONY: always-remake
always-remake: ;

check-codegen-%: obj/codegen.%.s codegen/check.sh
	@echo "Testing for expected instructions in $<"
	@codegen/check.sh "codegen/$*.c++" "$<"

obj/codegen.%.s: codegen/%.c++ obj
	@echo "Building $@"
	@$(CXX) $(CXXFLAGS) -masm=intel -march=skylake -fcf-protection=none -S -o $@ $<
	@cat $@ | grep -v '^\s*\.' | c++filt > $@.tmp
	@mv $@.tmp $@

